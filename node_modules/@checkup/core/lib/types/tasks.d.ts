import { CreateParser, Parser, ParserName, ParserOptions, ParserReport } from './parsers';
import { PackageJson } from 'type-fest';
import { CheckupConfig, TaskConfig } from './config';
import { FilePathArray } from '../utils/file-path-array';
import { RunFlags } from './cli';
import { Result } from 'sarif';
export declare type RegisterTaskArgs = {
    context: TaskContext;
    tasks: TaskList;
};
export declare type RegisterActionsArgs = {
    registerActions: (taskName: TaskName, evaluate: TaskActionsEvaluator) => void;
};
export declare type TaskActionsEvaluator = (taskResults: Result[], taskConfig: TaskConfig) => Action[];
export declare type RegisterTaskReporterArgs = {
    registerTaskReporter: (taskName: TaskName, report: TaskReporter) => void;
};
export declare type TaskReporter = (taskResults: Result[]) => void;
interface TaskList {
    registerTask(task: Task): void;
}
export declare type TaskName = string;
export declare type TaskIdentifier = {
    taskName: string;
    taskDisplayName: string;
};
export interface Task {
    taskName: TaskName;
    taskDisplayName: TaskName;
    config: TaskConfig;
    category: string;
    group?: string;
    readonly fullyQualifiedTaskName: string;
    readonly enabled: boolean;
    run: () => Promise<Result[]>;
}
export declare type ActionItem = string | string[] | {
    columns: string[];
    rows: object[];
};
export interface Action {
    name: string;
    summary: string;
    details: string;
    defaultThreshold: number;
    items: ActionItem[];
    input: number;
}
export declare type TaskError = {
    taskName: TaskName;
    error: Error;
};
export interface TaskContext {
    readonly cliArguments: string[];
    readonly cliFlags: RunFlags;
    readonly parsers: Map<ParserName, CreateParser<ParserOptions, Parser<ParserReport>>>;
    readonly config: CheckupConfig;
    readonly pkg: PackageJson;
    readonly paths: FilePathArray;
}
export declare enum OutputFormat {
    stdout = "stdout",
    json = "json"
}
export interface LintResult {
    filePath: string;
    lintRuleId: string | null;
    message: string;
    line: number;
    column: number;
    [key: string]: any;
}
export {};
//# sourceMappingURL=tasks.d.ts.map