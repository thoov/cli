import { ESLintMessage, ESLintReport, ESLintResult } from '../types/parsers';
import { LintResult, TaskError, Task } from '../types/tasks';
import { TemplateLintMessage, TemplateLintResult } from '../types/ember-template-lint';
import { Result, Notification } from 'sarif';
export declare const NO_RESULTS_FOUND = "No results found";
/**
 * @param taskContext {Task} This is used to set Task properties on the Result
 * @param lintResults {LintResult[]} The LintResults used to create Result
 * @param [additionalData] {Object} Any additional data to be put into the properties bag
 * @param [customMessages] {Record<string, string>} Custom messages to be rendered for each lintRule
 */
export declare function buildResultsFromLintResult(taskContext: Pick<Task, 'taskName' | 'taskDisplayName' | 'category' | 'group'>, lintResults: LintResult[], additionalData?: object, customMessages?: Record<string, string>): Result[];
/**
 * @param taskContext {Task} This is used to set Task properties on the Result
 * @param paths {string[]} The paths used to create Result
 * @param message {string} The message that identifies the data represented in the Result
 */
export declare function buildResultsFromPathArray(taskContext: Pick<Task, 'taskName' | 'taskDisplayName' | 'category' | 'group'>, paths: string[], message: string): Result[];
/**
 * @param taskContext {Task} This is used to set Task properties on the Result
 * @param key {string} An identifier used to help identify the result
 * @param data {Array<string | object>} The raw data used to derive the result's count
 */
export declare function buildResultsFromProperties(taskContext: Pick<Task, 'taskName' | 'taskDisplayName' | 'category' | 'group'>, data: any[], message: string): Result[];
export declare function buildLintResultData(report: ESLintReport, cwd: string): LintResult[];
export declare function buildLintResultDataItem(message: ESLintMessage | TemplateLintMessage, cwd: string, filePath: string, additionalData?: object): LintResult;
export declare function buildLintResultsFromEslintOrTemplateLint(lintResults: (ESLintResult | TemplateLintResult)[], cwd: string): LintResult[];
export declare function buildNotificationsFromTaskErrors(errors: TaskError[]): Notification[];
export declare function normalizePath(path: string, cwd: string): string;
export declare function normalizePaths(paths: string[], cwd: string): string[];
//# sourceMappingURL=builders.d.ts.map