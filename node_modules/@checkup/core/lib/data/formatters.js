"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineResultsForRendering = exports.groupDataByField = exports.toPercent = void 0;
const sarif_utils_1 = require("../utils/sarif-utils");
function toPercent(numeratorOrValue, denominator) {
    let value = typeof denominator === 'number' ? numeratorOrValue / denominator : numeratorOrValue;
    return `${(value * 100).toFixed()}%`;
}
exports.toPercent = toPercent;
function groupDataByField(results, field) {
    const map = new Map([...results].map((result) => [getMultiLevelProp(result, field), []]));
    results.forEach((result) => {
        var _a;
        (_a = map.get(getMultiLevelProp(result, field))) === null || _a === void 0 ? void 0 : _a.push(result);
    });
    return [...map.values()];
}
exports.groupDataByField = groupDataByField;
/*
 * This function takes in multiple Results with different locations but the same message,
 * and return a single Result to be rendered in the console (with occurrenceCounts added together)
 */
function combineResultsForRendering(groupedResults) {
    return groupedResults.map((results) => {
        const result = results[0];
        result.occurrenceCount = sarif_utils_1.sumOccurrences(results);
        return result;
    });
}
exports.combineResultsForRendering = combineResultsForRendering;
/*
 * This function accesses a variable property from within an Object that is multiple levels deep
 */
function getMultiLevelProp(obj, keys) {
    return keys.split('.').reduce(function (cur, key) {
        return cur[key];
    }, obj);
}
//# sourceMappingURL=formatters.js.map