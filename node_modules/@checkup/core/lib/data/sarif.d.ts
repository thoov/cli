import { LintResult, Task, TaskError } from '../types/tasks';
import { Result, Notification } from 'sarif';
export declare const NO_RESULTS_FOUND = "No results found";
declare type SarifTaskIdentifier = Pick<Task, 'taskName' | 'taskDisplayName' | 'category' | 'group'>;
/**
 * Builds SARIF Results from a list of LintResults.
 *
 * @param taskContext {Task} This is used to set Task properties on the Result
 * @param lintResults {LintResult[]} The LintResults used to create Result
 * @param [additionalData] {Object} Any additional data to be put into the properties bag
 * @param [customMessages] {Record<string, string>} Custom messages to be rendered for each lintRule
 */
declare function fromLintResults(taskContext: SarifTaskIdentifier, lintResults: LintResult[], additionalData?: object, customMessages?: Record<string, string>): Result[];
/**
 * Builds SARIF Results from a list of locations.
 *
 * @param taskContext {Task} This is used to set Task properties on the Result
 * @param locations {string[]} The paths used to create Result
 * @param message {string} The message that identifies the data represented in the Result
 */
declare function fromLocations(taskContext: SarifTaskIdentifier, locations: string[], message: string): Result[];
/**
 * Builds SARIF Results from a list of properties.
 *
 * @param taskContext {Task} This is used to set Task properties on the Result
 * @param key {string} An identifier used to help identify the result
 * @param data {Array<string | object>} The raw data used to derive the result's count
 */
declare function fromData<T>(taskContext: SarifTaskIdentifier, data: T[], message: string): Result[];
export declare function fromTaskErrors(errors: TaskError[]): Notification[];
export declare const sarifBuilder: {
    fromLintResults: typeof fromLintResults;
    fromLocations: typeof fromLocations;
    fromData: typeof fromData;
    notifications: {
        fromTaskErrors: typeof fromTaskErrors;
    };
};
export {};
//# sourceMappingURL=sarif.d.ts.map