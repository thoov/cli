"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const base_generator_1 = require("./base-generator");
const path_1 = require("path");
const fs_1 = require("fs");
const core_1 = require("@checkup/core");
const PLUGIN_DIR_PATTERN = /checkup-plugin-.*/;
class PluginGenerator extends base_generator_1.default {
    get _destinationPath() {
        let cwd = process.cwd();
        if (PLUGIN_DIR_PATTERN.test(cwd)) {
            return cwd;
        }
        return path_1.join(cwd, this.options.name);
    }
    async prompting() {
        this._normalizeName();
        if (fs_1.existsSync(this._destinationPath) && fs_1.readdirSync(this._destinationPath).length > 0) {
            throw new core_1.CheckupError(`Plugin destination ${chalk.bold.white(this._destinationPath)} is not empty`, 'Run the plugin generator in an empty directory');
        }
        this.headline(this.options.name);
        const defaults = {
            typescript: true,
            description: 'Checkup plugin',
            author: '',
            repository: '',
        };
        if (this.options.defaults) {
            this.answers = defaults;
        }
        else {
            this.answers = await this.prompt([
                {
                    type: 'confirm',
                    name: 'typescript',
                    message: 'TypeScript',
                    default: () => true,
                },
                {
                    type: 'input',
                    name: 'description',
                    message: 'Description',
                    default: 'Checkup plugin',
                },
                {
                    type: 'input',
                    name: 'author',
                    message: 'Author',
                    default: '',
                },
                {
                    type: 'input',
                    name: 'repository',
                    message: 'Repository',
                    default: '',
                },
            ]);
        }
        this.options.typescript = this.answers.typescript;
        this.options.description = this.answers.description;
        this.options.author = this.answers.author;
        this.options.repository = this.answers.repository;
    }
    writing() {
        this.sourceRoot(path_1.join(__dirname, '../../templates/src/plugin'));
        this.destinationRoot(this._destinationPath);
        this.fs.copyTpl(this.templatePath(`src/index.${this._ext}.ejs`), this.destinationPath(`src/index.${this._ext}`), this.options);
        this.fs.copyTpl(this.templatePath(`src/hooks/register-tasks.${this._ext}.ejs`), this.destinationPath(`src/hooks/register-tasks.${this._ext}`), this.options);
        this.fs.copyTpl(this.templatePath(`src/types/index.${this._ext}.ejs`), this.destinationPath(`src/types/index.${this._ext}`), this.options);
        this.fs.copy(this.templatePath('__tests__/.gitkeep'), this.destinationPath('__tests__/.gitkeep'));
        this.fs.copy(this.templatePath('src/results/.gitkeep'), this.destinationPath('src/results/.gitkeep'));
        this.fs.copy(this.templatePath('src/tasks/.gitkeep'), this.destinationPath('src/tasks/.gitkeep'));
        this.fs.copyTpl(this.templatePath(`jest.config.${this._ext}.ejs`), this.destinationPath('jest.config.js'), this.options);
        if (this.options.typescript) {
            this.fs.copy(this.templatePath('tsconfig.json.ejs'), this.destinationPath('tsconfig.json'));
        }
        this.fs.copy(this.templatePath('.eslintignore.ejs'), this.destinationPath('.eslintignore'));
        this.fs.copy(this.templatePath(`.eslintrc.${this._ext}.ejs`), this.destinationPath('.eslintrc'));
        this.fs.copy(this.templatePath('.gitignore.ejs'), this.destinationPath('.gitignore'));
        this.fs.copy(this.templatePath('.prettierrc.js.ejs'), this.destinationPath('.prettierrc.js'));
        this.fs.copyTpl(this.templatePath(`package.json.${this._ext}.ejs`), this.destinationPath('package.json'), this.options);
        this.fs.copyTpl(this.templatePath('README.md.ejs'), this.destinationPath('README.md'), this.options);
    }
    _normalizeName() {
        let name = this.options.name;
        if (!PLUGIN_DIR_PATTERN.test(name)) {
            this.options.name = `checkup-plugin-${name}`;
        }
    }
}
exports.default = PluginGenerator;
//# sourceMappingURL=plugin.js.map