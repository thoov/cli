"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRepositoryInfo = void 0;
const core_1 = require("@checkup/core");
const path_1 = require("path");
const fs = require('fs');
const sloc = require('sloc');
/*
 * note: these extensions must be supported here https://github.com/flosse/sloc/blob/731fbea00799a45a6068c4aaa1d6b7f67500615e/src/sloc.coffee#L264
 * for the analysis on comments/empty lines/etc to be correct
 */
const FILE_EXTENSIONS_SUPPORTED = new Set(sloc.extensions);
const hash = require('promise.hash.helper');
const COMMIT_COUNT = "git log --oneline $commit | wc -l | tr -d ' '";
const FILE_COUNT = "git ls-files | wc -l | tr -d ' '";
const REPO_AGE = 'git log --reverse --pretty=oneline --format=" % ar" | head -n 1 | LC_ALL=C sed \'s/ago//\'';
const ACTIVE_DAYS = `git log --pretty='format: %ai' $1 | cut -d ' ' -f 2 | sort -r | uniq | awk '
    { sum += 1 }
    END { print sum }
  '`;
/**
 * @param path
 */
function getRepositoryInfo(rootPath, paths) {
    return hash({
        totalCommits: core_1.exec(COMMIT_COUNT, { cwd: rootPath }, 0, Number),
        totalFiles: core_1.exec(FILE_COUNT, { cwd: rootPath }, 0, Number),
        age: core_1.exec(REPO_AGE, { cwd: rootPath }, '0 days'),
        activeDays: core_1.exec(ACTIVE_DAYS, { cwd: rootPath }, '0 days'),
        linesOfCode: getLinesOfCode(rootPath, paths),
    });
}
exports.getRepositoryInfo = getRepositoryInfo;
async function getLinesOfCode(rootPath, paths) {
    let fileInfos = [];
    await Promise.all(paths
        .filter((filePath) => {
        let extension = getExtension(filePath);
        return FILE_EXTENSIONS_SUPPORTED.has(extension);
    })
        .map((filePath) => {
        return fs.promises.readFile(filePath, 'utf8').then((contents) => {
            let extension = getExtension(filePath);
            let { total } = sloc(contents, extension);
            fileInfos.push({
                filePath: filePath.replace(rootPath, ''),
                extension,
                lines: total,
            });
        });
    }));
    let groupedFiles = core_1.groupDataByField(fileInfos, 'extension')
        .map((filesByExtension) => {
        return filesByExtension.reduce((acc, file) => {
            return { total: acc.total + file.lines, extension: file.extension };
        }, { extension: '', total: 0 });
    })
        .sort((a, b) => b.total - a.total);
    let total = groupedFiles.reduce((acc, value) => acc + value.total, 0);
    return { types: groupedFiles, total };
}
function getExtension(filePath) {
    return path_1.extname(filePath).replace('.', '');
}
//# sourceMappingURL=repository.js.map