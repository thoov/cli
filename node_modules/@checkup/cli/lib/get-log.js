"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLog = void 0;
const core_1 = require("@checkup/core");
const crypto = require("crypto");
const stringify = require("json-stable-stringify");
const get_version_1 = require("./utils/get-version");
const repository_1 = require("./utils/repository");
async function getLog(taskContext, taskResults, actions, invocation, taskList, executedTasks) {
    let checkupMetadata = await getCheckupMetadata(taskContext);
    return {
        version: '2.1.0',
        $schema: 'https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json',
        properties: Object.assign(Object.assign({}, checkupMetadata), { actions, timings: taskList.timings }),
        runs: [
            {
                results: taskResults,
                invocations: [invocation],
                tool: {
                    driver: {
                        name: 'Checkup',
                        rules: getReportingDescriptors(executedTasks),
                        language: 'en-US',
                        informationUri: 'https://github.com/checkupjs/checkup',
                        version: checkupMetadata.cli.version,
                    },
                },
            },
        ],
    };
}
exports.getLog = getLog;
/**
 *
 * @param taskNames
 * @returns {ReportingDescriptor[]} used to populate tool.driver.rules
 */
function getReportingDescriptors(tasks) {
    return tasks.map((task) => {
        return {
            id: task.taskName,
            shortDescription: { text: task.taskDisplayName },
            properties: { enabled: task.enabled, group: task.group, category: task.category },
        };
    });
}
function getConfigHash(checkupConfig) {
    let configAsJson = stringify(checkupConfig);
    return crypto.createHash('md5').update(configAsJson).digest('hex');
}
async function getCheckupMetadata(taskContext) {
    let package_ = taskContext.pkg;
    let repositoryInfo = await repository_1.getRepositoryInfo(taskContext.cliFlags.cwd, taskContext.paths);
    let { config, task, format } = taskContext.cliFlags;
    let analyzedFiles = core_1.normalizePaths(taskContext.paths, taskContext.cliFlags.cwd);
    return {
        project: {
            name: package_.name || '',
            version: package_.version || '',
            repository: repositoryInfo,
        },
        cli: {
            configHash: getConfigHash(taskContext.config),
            config: taskContext.config,
            version: get_version_1.getVersion(),
            schema: 1,
            args: {
                paths: taskContext.cliArguments,
            },
            flags: {
                config,
                task,
                format,
                outputFile: taskContext.cliFlags['output-file'],
                excludePaths: taskContext.cliFlags['exclude-paths'],
            },
        },
        analyzedFiles,
        analyzedFilesCount: analyzedFiles.length,
    };
}
//# sourceMappingURL=get-log.js.map