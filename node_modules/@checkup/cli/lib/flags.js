"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listTasks = exports.outputFile = exports.format = exports.task = exports.group = exports.category = exports.cwd = exports.config = exports.excludePaths = void 0;
const command_1 = require("@oclif/command");
const core_1 = require("@checkup/core");
exports.excludePaths = command_1.flags.string({
    description: 'Paths to exclude from checkup. If paths are provided via command line and via checkup config, command line paths will be used.',
    char: 'e',
    multiple: true,
});
exports.config = command_1.flags.string({
    char: 'c',
    description: 'Use this configuration, overriding .checkuprc.* if present.',
});
exports.cwd = command_1.flags.string({
    default: () => process.cwd(),
    char: 'd',
    description: 'The path referring to the root directory that Checkup will run in',
});
exports.category = command_1.flags.string({
    description: 'Runs specific tasks specified by category. Can be used multiple times.',
    multiple: true,
    exclusive: ['group', 'task'],
});
exports.group = command_1.flags.string({
    description: 'Runs specific tasks specified by group. Can be used multiple times.',
    multiple: true,
    exclusive: ['category', 'task'],
});
exports.task = command_1.flags.string({
    char: 't',
    description: 'Runs specific tasks specified by the fully qualified task name in the format pluginName/taskName. Can be used multiple times.',
    multiple: true,
    exclusive: ['category', 'group'],
});
exports.format = command_1.flags.string({
    char: 'f',
    options: [...Object.values(core_1.OutputFormat)],
    default: 'stdout',
    description: `The output format, one of ${[...Object.values(core_1.OutputFormat)].join(', ')}`,
});
exports.outputFile = command_1.flags.string({
    char: 'o',
    default: '',
    description: 'Specify file to write JSON output to. Requires the `--format` flag to be set to `json`',
});
exports.listTasks = command_1.flags.boolean({
    char: 'l',
    description: 'List all available tasks to run.',
});
//# sourceMappingURL=flags.js.map