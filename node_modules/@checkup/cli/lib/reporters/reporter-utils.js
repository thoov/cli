"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderCLIInfo = exports.renderLinesOfCode = exports.renderInfo = exports.renderActions = void 0;
const core_1 = require("@checkup/core");
const chalk_1 = require("chalk");
function renderActions(actions) {
    if (actions && actions.length > 0) {
        core_1.ui.categoryHeader('Actions');
        actions.forEach((action) => {
            core_1.ui.log(`${chalk_1.yellow('â– ')} ${chalk_1.bold(action.summary)} (${action.details})`);
        });
        core_1.ui.blankLine();
    }
}
exports.renderActions = renderActions;
function renderInfo(info) {
    let { analyzedFilesCount } = info;
    let { name, version, repository } = info.project;
    let analyzedFilesMessage = repository.totalFiles !== analyzedFilesCount
        ? ` (${core_1.ui.emphasize(`${analyzedFilesCount} files`)} analyzed)`
        : '';
    core_1.ui.blankLine();
    core_1.ui.log(`Checkup report generated for ${core_1.ui.emphasize(`${name} v${version}`)}${analyzedFilesMessage}`);
    core_1.ui.blankLine();
    core_1.ui.log(`This project is ${core_1.ui.emphasize(`${repository.age} old`)}, with ${core_1.ui.emphasize(`${repository.activeDays} active days`)}, ${core_1.ui.emphasize(`${repository.totalCommits} commits`)} and ${core_1.ui.emphasize(`${repository.totalFiles} files`)}.`);
    core_1.ui.blankLine();
}
exports.renderInfo = renderInfo;
function renderLinesOfCode(info) {
    let { repository } = info.project;
    core_1.ui.sectionedBar(repository.linesOfCode.types.map((type) => {
        return { title: type.extension, count: type.total };
    }), repository.linesOfCode.total, 'lines of code');
    core_1.ui.blankLine();
}
exports.renderLinesOfCode = renderLinesOfCode;
function renderCLIInfo(info) {
    let { version: cliVersion, configHash } = info.cli;
    core_1.ui.dimmed(`checkup v${cliVersion}`);
    core_1.ui.dimmed(`config ${configHash}`);
    core_1.ui.blankLine();
}
exports.renderCLIInfo = renderCLIInfo;
//# sourceMappingURL=reporter-utils.js.map