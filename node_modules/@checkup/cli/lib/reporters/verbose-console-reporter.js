"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderEmptyResult = exports.report = void 0;
const core_1 = require("@checkup/core");
const cleanStack = require("clean-stack");
const lodash_1 = require("lodash");
const reporter_utils_1 = require("./reporter-utils");
let outputMap = {
    'ember-dependencies': function (taskResults) {
        var _a;
        if (!taskResults.some((result) => { var _a; return ((_a = result.properties) === null || _a === void 0 ? void 0 : _a.data) !== undefined; })) {
            return;
        }
        core_1.ui.section((_a = taskResults[0].properties) === null || _a === void 0 ? void 0 : _a.taskDisplayName, () => {
            taskResults.forEach((result) => {
                var _a;
                if (result.message.text === core_1.NO_RESULTS_FOUND) {
                    renderEmptyResult(result);
                }
                else {
                    core_1.ui.value({ title: result.message.text, count: (_a = result.properties) === null || _a === void 0 ? void 0 : _a.data.length });
                }
            });
        });
    },
    'ember-test-types': function (taskResults) {
        var _a;
        let groupedTaskResults = core_1.groupDataByField(taskResults, 'message.text');
        core_1.ui.section((_a = taskResults[0].properties) === null || _a === void 0 ? void 0 : _a.taskDisplayName, () => {
            groupedTaskResults.forEach((resultGroup) => {
                let groupedTaskResultsByMethod = core_1.combineResultsForRendering(core_1.groupDataByField(resultGroup, 'properties.method'));
                core_1.ui.subHeader(groupedTaskResultsByMethod[0].message.text);
                core_1.ui.valuesList(groupedTaskResultsByMethod.map((result) => {
                    var _a;
                    if (result.message.text === core_1.NO_RESULTS_FOUND) {
                        renderEmptyResult(result);
                    }
                    else {
                        return { title: (_a = result.properties) === null || _a === void 0 ? void 0 : _a.method, count: result.occurrenceCount };
                    }
                }));
                core_1.ui.blankLine();
            });
            core_1.ui.subHeader('tests by type');
            core_1.ui.sectionedBar(groupedTaskResults.map((results) => {
                return {
                    title: results[0].message.text,
                    count: core_1.sumOccurrences(results),
                };
            }), core_1.sumOccurrences(taskResults), 'tests');
        });
    },
    'ember-octane-migration-status': function (taskResults) {
        var _a;
        core_1.ui.section((_a = taskResults[0].properties) === null || _a === void 0 ? void 0 : _a.taskDisplayName, () => {
            core_1.ui.log(`${core_1.ui.emphasize('Octane Violations')}: ${core_1.sumOccurrences(taskResults)}`);
            core_1.ui.blankLine();
            let groupedTaskResults = core_1.groupDataByField(taskResults, 'properties.resultGroup');
            groupedTaskResults.forEach((resultGroup) => {
                var _a;
                let groupedTaskResultsByLintRuleId = core_1.combineResultsForRendering(core_1.groupDataByField(resultGroup, 'properties.lintRuleId'));
                core_1.ui.subHeader((_a = groupedTaskResultsByLintRuleId[0].properties) === null || _a === void 0 ? void 0 : _a.resultGroup);
                core_1.ui.valuesList(groupedTaskResultsByLintRuleId.map((result) => {
                    var _a;
                    if (result.message.text === core_1.NO_RESULTS_FOUND) {
                        renderEmptyResult(result);
                    }
                    else {
                        return { title: (_a = result.properties) === null || _a === void 0 ? void 0 : _a.lintRuleId, count: result.occurrenceCount };
                    }
                }), 'violations');
                core_1.ui.blankLine();
            });
        });
    },
    'ember-template-lint-summary': renderLintingSummaryResult,
    'eslint-summary': renderLintingSummaryResult,
    'outdated-dependencies': function (taskResults) {
        var _a;
        core_1.ui.section((_a = taskResults[0].properties) === null || _a === void 0 ? void 0 : _a.taskDisplayName, () => {
            core_1.ui.sectionedBar(taskResults.map((result) => {
                if (result.message.text === core_1.NO_RESULTS_FOUND) {
                    renderEmptyResult(result);
                }
                else {
                    return { title: result.message.text, count: result.occurrenceCount };
                }
            }), core_1.sumOccurrences(taskResults), 'dependencies');
        });
    },
};
function report(result) {
    var _a, _b;
    let metaData = result.properties;
    reporter_utils_1.renderInfo(metaData);
    reporter_utils_1.renderLinesOfCode(metaData);
    result.runs.forEach((run) => {
        var _a;
        renderTaskResults(run.results);
        (_a = run.invocations) === null || _a === void 0 ? void 0 : _a.forEach((invocation) => {
            renderErrors(invocation.toolExecutionNotifications);
        });
    });
    reporter_utils_1.renderActions((_a = result.properties) === null || _a === void 0 ? void 0 : _a.actions);
    if (process.env.CHECKUP_TIMING === '1') {
        renderTimings((_b = result.properties) === null || _b === void 0 ? void 0 : _b.timings);
    }
    reporter_utils_1.renderCLIInfo(metaData);
}
exports.report = report;
function renderTaskResults(pluginTaskResults) {
    let currentCategory = '';
    if (pluginTaskResults) {
        let groupedTaskResults = core_1.groupDataByField(pluginTaskResults, 'ruleId');
        groupedTaskResults === null || groupedTaskResults === void 0 ? void 0 : groupedTaskResults.forEach((taskResultGroup) => {
            var _a;
            let taskCategory = (_a = taskResultGroup[0].properties) === null || _a === void 0 ? void 0 : _a.category;
            if (taskCategory !== currentCategory) {
                core_1.ui.categoryHeader(lodash_1.startCase(taskCategory));
                currentCategory = taskCategory;
            }
            let reporter = getTaskReporter(taskResultGroup);
            reporter(taskResultGroup);
        });
    }
    core_1.ui.blankLine();
}
function getTaskReporter(taskResult) {
    let taskName = taskResult[0].ruleId;
    let registeredTaskReporters = core_1.getRegisteredTaskReporters();
    let reporter = outputMap[taskName] || registeredTaskReporters.get(taskName) || getReportComponent;
    if (typeof reporter === 'undefined') {
        throw new core_1.CheckupError(`Unable to find a console reporter for ${taskName}`, 'Add a console task reporter using a `register-task-reporter` hook');
    }
    return reporter;
}
function renderEmptyResult(taskResult) {
    var _a, _b;
    core_1.ui.value({
        title: ((_a = taskResult.properties) === null || _a === void 0 ? void 0 : _a.consoleMessage) || ((_b = taskResult.properties) === null || _b === void 0 ? void 0 : _b.taskDisplayName),
        count: 0,
    });
}
exports.renderEmptyResult = renderEmptyResult;
function getReportComponent(taskResults) {
    var _a;
    const groupedTaskResults = core_1.combineResultsForRendering(core_1.groupDataByField(taskResults, 'message.text'));
    core_1.ui.section((_a = groupedTaskResults[0].properties) === null || _a === void 0 ? void 0 : _a.taskDisplayName, () => {
        const totalResults = core_1.sumOccurrences(groupedTaskResults);
        core_1.ui.log(`Total: ${totalResults}`);
        groupedTaskResults.forEach((result) => {
            if (result.message.text === core_1.NO_RESULTS_FOUND) {
                renderEmptyResult(result);
            }
            else {
                core_1.ui.value({
                    title: result.message.text || result.ruleId,
                    count: (result === null || result === void 0 ? void 0 : result.occurrenceCount) || Number.NaN,
                });
            }
        });
    });
}
function renderErrors(notifications) {
    if (notifications && notifications.length > 0) {
        core_1.ui.table(notifications.map((notification) => {
            var _a, _b;
            return {
                taskName: (_a = notification.associatedRule) === null || _a === void 0 ? void 0 : _a.id,
                stack: cleanStack(((_b = notification.properties) === null || _b === void 0 ? void 0 : _b.fullError) || ''),
            };
        }), { taskName: {}, stack: { header: 'Error' } });
    }
}
function renderTimings(timings) {
    let total = Object.values(timings).reduce((total, timing) => (total += timing), 0);
    core_1.ui.categoryHeader('Task Timings');
    core_1.ui.table(Object.keys(timings)
        .map((taskName) => {
        return {
            taskName,
            time: timings[taskName],
            relative: `${((timings[taskName] * 100) / total).toFixed(1)}%`,
        };
    })
        .sort((a, b) => b.time - a.time), {
        taskName: {},
        timeFormatted: { header: 'Time', get: (row) => `${row.time.toFixed(1)}s` },
        relative: {},
    });
    core_1.ui.blankLine();
}
function renderLintingSummaryResult(taskResults) {
    var _a;
    let groupedTaskResultsByType = core_1.groupDataByField(taskResults, 'properties.type');
    core_1.ui.section((_a = taskResults[0].properties) === null || _a === void 0 ? void 0 : _a.taskDisplayName, () => {
        groupedTaskResultsByType.forEach((resultGroup) => {
            var _a;
            let groupedTaskResultsByLintRule = core_1.combineResultsForRendering(core_1.groupDataByField(resultGroup, 'properties.lintRuleId')).sort((a, b) => (b.occurrenceCount || 0) - (a.occurrenceCount || 0));
            let totalCount = core_1.sumOccurrences(groupedTaskResultsByLintRule);
            if (totalCount) {
                core_1.ui.subHeader(`${(_a = groupedTaskResultsByLintRule[0].properties) === null || _a === void 0 ? void 0 : _a.type}s: (${totalCount})`);
                core_1.ui.valuesList(groupedTaskResultsByLintRule.map((result) => {
                    var _a;
                    if (result.message.text === core_1.NO_RESULTS_FOUND) {
                        renderEmptyResult(result);
                    }
                    else {
                        return { title: (_a = result.properties) === null || _a === void 0 ? void 0 : _a.lintRuleId, count: result === null || result === void 0 ? void 0 : result.occurrenceCount };
                    }
                }));
                core_1.ui.blankLine();
            }
        });
    });
}
//# sourceMappingURL=verbose-console-reporter.js.map