"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const path_1 = require("path");
const command_1 = require("@oclif/command");
const fs_1 = require("fs");
const DEFAULT_COMMAND = 'run';
const COMMANDS = new Set(fs_1.readdirSync(path_1.join(__dirname, 'commands')).map((filename) => path_1.basename(filename, path_1.extname(filename))));
function run() {
    let args = process.argv.slice(2);
    let maybeCommand = args[0];
    // if the args don't contain a known command, we default to the `run` command
    if (!COMMANDS.has(maybeCommand)) {
        args.unshift(DEFAULT_COMMAND);
    }
    // Used to signal to the oclif commands that we're invoking in
    // CLI mode - prevents any stdout when invoking Checkup programmatically
    process.env.CHECKUP_CLI = '1';
    return command_1.run(args);
}
exports.run = run;
var run_command_1 = require("./run-command");
Object.defineProperty(exports, "runCommand", { enumerable: true, get: function () { return run_command_1.runCommand; } });
var get_reporter_1 = require("./reporters/get-reporter");
Object.defineProperty(exports, "getReporter", { enumerable: true, get: function () { return get_reporter_1.getReporter; } });
var run_1 = require("./commands/run");
Object.defineProperty(exports, "Checkup", { enumerable: true, get: function () { return run_1.default; } });
//# sourceMappingURL=index.js.map