import { BaseCommand } from '../base-command';
import { IConfig } from '@oclif/config';
import { flags } from '@oclif/command';
export interface Options {
    type: string;
    name: string;
    path?: string;
    defaults?: boolean;
    force?: boolean;
}
export default class GenerateCommand extends BaseCommand {
    private baseDir;
    static description: string;
    static flags: {
        defaults: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        options: flags.IOptionFlag<string | undefined>;
        force: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        path: flags.IOptionFlag<string>;
    };
    static args: ({
        name: string;
        required: boolean;
        description: string;
    } | {
        name: string;
        description: string;
        required?: undefined;
    })[];
    constructor(argv: string[], config: IConfig);
    run(): Promise<void>;
    generate(type: string, generatorOptions: Options): Promise<void>;
}
//# sourceMappingURL=generate.d.ts.map