"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@checkup/core");
const command_1 = require("@oclif/command");
const base_task_command_1 = require("../base-task-command");
const args_1 = require("../args");
const flags_1 = require("../flags");
class ValidateCommand extends base_task_command_1.BaseTaskCommand {
    async init() {
        let { argv, flags } = this.parse(ValidateCommand);
        if (flags['output-file'] && flags.format !== core_1.OutputFormat.json) {
            this.error(new Error('Missing --format flag. --format=json must also be provided when using --output-file'));
        }
        this.startTime = new Date().toJSON();
        this.runArgs = argv;
        this.runFlags = flags;
        this.cliModeEnabled = process.env.CHECKUP_CLI === '1';
    }
    async registerTasks() {
        await this.config.runHook('register-validate-tasks', {
            context: this.taskContext,
            tasks: this.pluginTasks,
        });
    }
}
exports.default = ValidateCommand;
ValidateCommand.description = 'Runs validate-based tasks';
ValidateCommand.strict = false;
ValidateCommand.usage = 'migration PATHS [OPTIONS]';
ValidateCommand.args = [args_1.pathArg];
ValidateCommand.flags = {
    version: command_1.flags.version({ char: 'v' }),
    help: command_1.flags.help({ char: 'h' }),
    'exclude-paths': flags_1.excludePaths,
    config: flags_1.config,
    cwd: flags_1.cwd,
    category: flags_1.category,
    group: flags_1.group,
    task: flags_1.task,
    format: flags_1.format,
    'output-file': flags_1.outputFile,
    'list-tasks': flags_1.listTasks,
    verbose: command_1.flags.boolean({
        exclusive: ['format', 'output-file'],
    }),
};
//# sourceMappingURL=validate.js.map