import { CheckupConfig, RunFlags, Task, TaskContext, TaskError, Action } from '@checkup/core';
import { flags } from '@oclif/command';
import { BaseCommand } from '../base-command';
import TaskList from '../task-list';
import { Log, Result } from 'sarif';
export declare function _registerTaskForTesting(task: Task): void;
export declare function _resetTasksForTesting(): void;
export default class RunCommand extends BaseCommand {
    static description: string;
    static strict: boolean;
    static usage: string;
    static args: {
        name: string;
        description: string;
    }[];
    static flags: {
        version: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        'exclude-paths': flags.IOptionFlag<string[]>;
        config: flags.IOptionFlag<string | undefined>;
        cwd: flags.IOptionFlag<string>;
        category: flags.IOptionFlag<string[]>;
        group: flags.IOptionFlag<string[]>;
        task: flags.IOptionFlag<string[]>;
        format: flags.IOptionFlag<string>;
        'output-file': flags.IOptionFlag<string>;
        'list-tasks': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        verbose: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    runArgs: string[];
    runFlags: RunFlags;
    pluginTasks: TaskList;
    pluginTaskResults: Result[];
    pluginTaskErrors: TaskError[];
    startTime: string;
    actions: Action[];
    checkupConfig: CheckupConfig;
    executedTasks: Task[];
    cliModeEnabled: boolean;
    taskContext: TaskContext;
    get taskFilterType(): "category" | "group" | "" | "task";
    init(): Promise<void>;
    run(): Promise<Log | undefined>;
    private runTasks;
    private findTasks;
    private runActions;
    private loadConfig;
    private register;
    private report;
    private printAvailableTasks;
    private getInvocation;
}
//# sourceMappingURL=run.d.ts.map